{"version":3,"sources":["Weather/Title/Title.js","Weather/Input/Input.js","constants/index.js","Weather/Info/Info.js","Weather/Weather.js","NotFound/NotFound.js","App.js","serviceWorker.js","index.js"],"names":["Title","city","className","Input","props","useState","tempCity","setTempCity","useEffect","setCity","onSubmit","event","preventDefault","handleSubmit","type","onChange","target","value","Info","data","apiData","undefined","list","weatherToday","weather","main","weatherTommorow","temperatureToday","temp","temperatureTommorow","weatherInfo","Weather","setData","callback","fetch","then","res","json","result","catch","err","console","log","getWeatherData","NotFound","App","basename","process","path","component","exact","from","to","Boolean","window","location","hostname","match","ReactDOM","render","document","getElementById","navigator","serviceWorker","ready","registration","unregister","error","message"],"mappings":"kSAeeA,MAXf,YAA0B,IAATC,EAAQ,EAARA,KACf,OAHyB,OAGrBA,EAEA,4BACE,6CACA,0BAAMC,UAAU,YAAYD,IAGpB,mE,MCsBDE,MA9Bf,SAAeC,GAAQ,IAAD,EACYC,mBCLA,MDIZ,mBACbC,EADa,KACHC,EADG,KASpB,OANAC,qBAAU,WACS,KAAbF,GACFF,EAAMK,QCTsB,QDW7B,CAACH,IAGF,0BACEJ,UAAU,WACVQ,SAAU,SAAAC,GACRA,EAAMC,iBACNR,EAAMS,aAAaP,KAGrB,2BACEJ,UAAU,iBACVY,KAAK,OACLC,SAAU,SAAAJ,GAAK,OAAIJ,EAAYI,EAAMK,OAAOC,UAG9C,4BAAQf,UAAU,kBAAkBY,KAAK,UAAzC,YEWSI,MARf,SAAcd,GACZ,OD/BgC,OC+BzBA,EAAMe,KACX,0CAEA,6BA/BgB,SAACC,EAASnB,GAC5B,GDJgC,OCI5BA,EACF,MAAO,eAET,QAAqBoB,IAAjBD,EAAQE,KACV,MAAO,uBAGT,IAAMC,EAAeH,EAAQE,KAAK,GAAGE,QAAQ,GAAGC,KAC1CC,EAAkBN,EAAQE,KAAK,GAAGE,QAAQ,GAAGC,KAC7CE,EAAmBP,EAAQE,KAAK,GAAGG,KAAKG,KACxCC,EAAsBT,EAAQE,KAAK,GAAGG,KAAKG,KAEjD,OACE,oCACE,sCACA,2CACgBD,EADhB,sBACuDJ,GAEvD,yCACA,2CACgBM,EADhB,sBAC0DH,IAUtDI,CAAY1B,EAAMe,KAAMf,EAAMH,QCQzB8B,MAxBf,WAAoB,IAAD,EACO1B,mBFnBQ,MEkBf,mBACVc,EADU,KACJa,EADI,OAEO3B,mBFpBQ,MEkBf,mBAEVJ,EAFU,KAEJQ,EAFI,KAejB,OANAD,qBAAU,WF3BsB,OE4B1BW,GArBe,SAAClB,EAAMgC,GAC5BC,MAAM,qDAAD,OACkDjC,EADlD,+BFPgB,qCEUlBkC,MAAK,SAAAC,GAAG,OAAIA,EAAIC,UAChBF,MAAK,SAAAG,GACJL,EAASK,MAEVC,OAAM,SAAAC,GAAG,OAAIC,QAAQC,IAAIF,EAAM,oBAc9BG,CAAe1C,EAAM+B,KAEtB,CAACb,EAAMlB,IAGR,yBAAKC,UAAU,mBACb,kBAAC,EAAD,CAAOD,KAAMA,IACb,kBAAC,EAAD,CAAOY,aAdU,SAAAP,GACnBG,EAAQH,GACR0B,EFxB8B,OEoCOvB,QAASA,IAC5C,kBAAC,EAAD,CAAMU,KAAMA,EAAMlB,KAAMA,MC/Bf2C,MAJf,WACE,OAAO,mD,eCmBMC,MAZf,WACE,OACE,kBAAC,IAAD,CAAQC,SAAUC,oBAChB,kBAAC,IAAD,KACE,kBAAC,IAAD,CAAOC,KAAK,IAAIC,UAAWlB,EAASmB,OAAK,IACzC,kBAAC,IAAD,CAAOF,KAAK,OAAOC,UAAWL,IAC9B,kBAAC,IAAD,CAAUO,KAAK,IAAIC,GAAG,YCJVC,QACW,cAA7BC,OAAOC,SAASC,UAEe,UAA7BF,OAAOC,SAASC,UAEhBF,OAAOC,SAASC,SAASC,MACvB,2DCZNC,IAASC,OAAO,kBAAC,EAAD,MAASC,SAASC,eAAe,SD6H3C,kBAAmBC,WACrBA,UAAUC,cAAcC,MACrB7B,MAAK,SAAA8B,GACJA,EAAaC,gBAEd3B,OAAM,SAAA4B,GACL1B,QAAQ0B,MAAMA,EAAMC,c","file":"static/js/main.bef3071c.chunk.js","sourcesContent":["import React from \"react\";\nimport \"./TitleStyles.css\";\nconst INITIAL_DATA_VALUE = null;\n\nfunction Title({ city }) {\n  if (city !== INITIAL_DATA_VALUE) {\n    return (\n      <h1>\n        <span>Weather in </span>\n        <span className=\"cityName\">{city}</span>\n      </h1>\n    );\n  } else return <h1>To check weather type in the city.</h1>;\n}\n\nexport default Title;\n","import React, { useState, useEffect } from \"react\";\nimport { INITIAL_DATA_VALUE } from \"../../constants\";\nimport \"./InputStyles.css\";\n\nfunction Input(props) {\n  const [tempCity, setTempCity] = useState(INITIAL_DATA_VALUE);\n\n  useEffect(() => {\n    if (tempCity === \"\") {\n      props.setCity(INITIAL_DATA_VALUE);\n    }\n  }, [tempCity]);\n\n  return (\n    <form\n      className=\"cityForm\"\n      onSubmit={event => {\n        event.preventDefault();\n        props.handleSubmit(tempCity);\n      }}\n    >\n      <input\n        className=\"cityForm_input\"\n        type=\"text\"\n        onChange={event => setTempCity(event.target.value)}\n      />\n\n      <button className=\"cityForm_submit\" type=\"submit\">\n        submit\n      </button>\n    </form>\n  );\n}\n\nexport default Input;\n","export const INITIAL_DATA_VALUE = null;\nexport const API_KEY = \"9634c5e8feb4b0374fe763d401506e5b\";\n","import React from \"react\";\nimport { INITIAL_DATA_VALUE } from \"../../constants\";\n\nconst weatherInfo = (apiData, city) => {\n  if (city === INITIAL_DATA_VALUE) {\n    return \"Type in city\";\n  }\n  if (apiData.list === undefined) {\n    return \"Didn't find the city\";\n  }\n\n  const weatherToday = apiData.list[0].weather[0].main;\n  const weatherTommorow = apiData.list[1].weather[0].main;\n  const temperatureToday = apiData.list[0].main.temp;\n  const temperatureTommorow = apiData.list[1].main.temp;\n\n  return (\n    <>\n      <h3>Today:</h3>\n      <p>\n        Temperature: {temperatureToday}&#186;C. Conditions: {weatherToday}\n      </p>\n      <h3>Tommorow:</h3>\n      <p>\n        Temperature: {temperatureTommorow}&#186;C. Conditions: {weatherTommorow}\n      </p>\n    </>\n  );\n};\n\nfunction Info(props) {\n  return props.data === INITIAL_DATA_VALUE ? (\n    <h4>Loading...</h4>\n  ) : (\n    <div>{weatherInfo(props.data, props.city)}</div>\n  );\n}\n\nexport default Info;\n","import React, { useState, useEffect } from \"react\";\nimport \"./WeatherStyles.css\";\nimport Title from \"./Title/Title\";\nimport Input from \"./Input/Input\";\nimport Info from \"./Info/Info\";\nimport { INITIAL_DATA_VALUE, API_KEY } from \"../constants\";\n\nconst getWeatherData = (city, callback) => {\n  fetch(\n    `http://api.openweathermap.org/data/2.5/forecast?q=${city}&units=metric&appid=${API_KEY}`\n  )\n    .then(res => res.json())\n    .then(result => {\n      callback(result);\n    })\n    .catch(err => console.log(err + \"this is error\"));\n};\n\nfunction Weather() {\n  const [data, setData] = useState(INITIAL_DATA_VALUE);\n  const [city, setCity] = useState(INITIAL_DATA_VALUE);\n\n  const handleSubmit = tempCity => {\n    setCity(tempCity);\n    setData(INITIAL_DATA_VALUE);\n  };\n\n  useEffect(() => {\n    if (data === INITIAL_DATA_VALUE) {\n      getWeatherData(city, setData);\n    }\n  }, [data, city]);\n\n  return (\n    <div className=\"temperatureInfo\">\n      <Title city={city} />\n      <Input handleSubmit={handleSubmit} setCity={setCity} />\n      <Info data={data} city={city} />\n    </div>\n  );\n}\n\nexport default Weather;\n","import React from \"react\";\n\nfunction NotFound() {\n  return <h1>404 page not found</h1>;\n}\n\nexport default NotFound;\n","import React from \"react\";\nimport Weather from \"./Weather/Weather\";\nimport NotFound from \"./NotFound/NotFound\";\nimport {\n  BrowserRouter as Router,\n  Switch,\n  Route,\n  Redirect\n} from \"react-router-dom\";\n\nfunction App() {\n  return (\n    <Router basename={process.env.PUBLIC_URL}>\n      <Switch>\n        <Route path=\"/\" component={Weather} exact />\n        <Route path=\"/404\" component={NotFound} />\n        <Redirect from=\"*\" to=\"/404\" />\n      </Switch>\n    </Router>\n  );\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' }\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(<App />, document.getElementById('root'));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}